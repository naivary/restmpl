// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ctrl

import (
	"github.com/google/wire"
	"github.com/naivary/instance/internal/app/fs"
	"github.com/naivary/instance/internal/app/sys"
	"github.com/naivary/instance/internal/pkg/config"
	"github.com/naivary/instance/internal/pkg/database"
	"github.com/naivary/instance/internal/pkg/filestore"
	"github.com/naivary/instance/internal/pkg/models/metadata"
	"github.com/naivary/instance/internal/pkg/routes"
	"github.com/naivary/instance/internal/pkg/services"
)

// Injectors from wire.go:

func New() (*API, error) {
	koanf, err := config.New()
	if err != nil {
		return nil, err
	}
	sqlDB, err := database.Connect(koanf)
	if err != nil {
		return nil, err
	}
	metadataMetadata := metadata.New(koanf)
	env := sys.Env{
		K:  koanf,
		DB: sqlDB,
		M:  metadataMetadata,
	}
	filestoreFilestore, err := filestore.New(koanf)
	if err != nil {
		return nil, err
	}
	fsEnv := fs.Env{
		K:     koanf,
		Store: filestoreFilestore,
	}
	servicesServices := services.Services{
		Sys: env,
		Fs:  fsEnv,
	}
	services2 := &services.Services{
		Sys: env,
		Fs:  fsEnv,
	}
	router := routes.New(services2)
	api := &API{
		Services: servicesServices,
		Router:   router,
	}
	return api, nil
}

// wire.go:

var (
	db     = wire.NewSet(database.Connect)
	svc    = wire.NewSet(wire.Struct(new(sys.Env), "*"), wire.Struct(new(fs.Env), "*"), wire.Struct(new(services.Services), "*"))
	app    = wire.Struct(new(API), "*")
	httpFs = wire.NewSet(filestore.New, wire.Bind(new(filestore.Store), new(filestore.Filestore)))
	k      = wire.NewSet(config.New)
	m      = wire.NewSet(metadata.New)
)
