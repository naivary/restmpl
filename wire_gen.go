// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/naivary/instance/internal/app/fs"
	"github.com/naivary/instance/internal/app/sys"
	"github.com/naivary/instance/internal/pkg/config"
	"github.com/naivary/instance/internal/pkg/ctrl"
	"github.com/naivary/instance/internal/pkg/database"
	"github.com/naivary/instance/internal/pkg/models/metadata"
	"github.com/naivary/instance/internal/pkg/routes"
)

// Injectors from wire.go:

func NewApp() (*ctrl.App, error) {
	koanf, err := config.New()
	if err != nil {
		return nil, err
	}
	sqlDB, err := database.Connect()
	if err != nil {
		return nil, err
	}
	metadataMetadata := metadata.New(koanf)
	env := sys.Env{
		K:  koanf,
		DB: sqlDB,
		M:  metadataMetadata,
	}
	fsEnv := fs.Env{}
	ctrlViews := ctrl.Views{
		Sys: env,
		Fs:  fsEnv,
	}
	views2 := &ctrl.Views{
		Sys: env,
		Fs:  fsEnv,
	}
	router := routes.New(views2)
	ctrlApp := &ctrl.App{
		Views:  ctrlViews,
		Router: router,
	}
	return ctrlApp, nil
}

// wire.go:

var (
	db    = wire.NewSet(database.Connect)
	views = wire.NewSet(wire.Struct(new(sys.Env), "*"), wire.Struct(new(fs.Env), "*"), wire.Struct(new(ctrl.Views), "*"))
	k     = wire.NewSet(config.New)
	app   = wire.Struct(new(ctrl.App), "*")
	m     = wire.NewSet(metadata.New)
)
