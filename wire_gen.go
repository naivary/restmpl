// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/naivary/instance/internal/app/fs"
	"github.com/naivary/instance/internal/app/sys"
	"github.com/naivary/instance/internal/pkg/config"
	"github.com/naivary/instance/internal/pkg/ctrl"
	"github.com/naivary/instance/internal/pkg/database"
	"github.com/naivary/instance/internal/pkg/filestore"
	"github.com/naivary/instance/internal/pkg/models/metadata"
	"github.com/naivary/instance/internal/pkg/routes"
	"github.com/naivary/instance/internal/pkg/service"
)

// Injectors from wire.go:

func NewApp() (*ctrl.API, error) {
	koanf, err := config.New()
	if err != nil {
		return nil, err
	}
	sqlDB, err := database.Connect(koanf)
	if err != nil {
		return nil, err
	}
	metadataMetadata := metadata.New(koanf)
	env := &sys.Env{
		K:  koanf,
		DB: sqlDB,
		M:  metadataMetadata,
	}
	filestoreFilestore, err := filestore.New(koanf)
	if err != nil {
		return nil, err
	}
	fsEnv := &fs.Env{
		K:     koanf,
		Store: filestoreFilestore,
	}
	v := allSvcs(env, fsEnv)
	router := routes.New(v)
	ctrlAPI := &ctrl.API{
		Services: v,
		Router:   router,
	}
	return ctrlAPI, nil
}

// wire.go:

var (
	db         = wire.NewSet(database.Connect)
	svcs       = wire.NewSet(wire.Struct(new(sys.Env), "*"), wire.Struct(new(fs.Env), "*"))
	api        = wire.Struct(new(ctrl.API), "*")
	httpFs     = wire.NewSet(filestore.New, wire.Bind(new(filestore.Store), new(filestore.Filestore)))
	rootRouter = wire.NewSet(routes.New)
	k          = wire.NewSet(config.New)
	m          = wire.NewSet(metadata.New)
)

func allSvcs(sys2 *sys.Env, fs2 *fs.Env) []service.Service {
	return []service.Service{sys2, fs2}
}
