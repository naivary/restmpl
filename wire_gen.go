// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-chi/chi/v5"
	"github.com/google/wire"
	"github.com/knadh/koanf/v2"
	"github.com/naivary/instance/internal/app/fs"
	"github.com/naivary/instance/internal/app/sys"
	"github.com/naivary/instance/internal/pkg/config"
	"github.com/naivary/instance/internal/pkg/database"
	"github.com/naivary/instance/internal/pkg/env"
	"github.com/naivary/instance/internal/pkg/filestore"
	"github.com/naivary/instance/internal/pkg/models/metadata"
	"github.com/naivary/instance/internal/pkg/service"
)

// Injectors from wire.go:

func newEnv(cfgFile string) (env.API, error) {
	koanf, err := config.New(cfgFile)
	if err != nil {
		return env.API{}, err
	}
	dbxDB, err := database.Connect(koanf)
	if err != nil {
		return env.API{}, err
	}
	metadataMetadata := metadata.New(koanf, dbxDB)
	sysSys := &sys.Sys{
		K:  koanf,
		DB: dbxDB,
		M:  metadataMetadata,
	}
	filestoreFilestore, err := filestore.New(koanf)
	if err != nil {
		return env.API{}, err
	}
	fsFs := &fs.Fs{
		K:     koanf,
		Store: filestoreFilestore,
	}
	v := allSvcs(sysSys, fsFs)
	api := env.NewAPI(v, koanf)
	return api, nil
}

// wire.go:

var (
	db     = wire.NewSet(database.Connect)
	svcs   = wire.NewSet(wire.Struct(new(sys.Sys), "*"), wire.Struct(new(fs.Fs), "*"))
	httpFs = wire.NewSet(filestore.New, wire.Bind(new(filestore.Store), new(filestore.Filestore)))
	e      = wire.NewSet(env.NewAPI, wire.Bind(new(env.Env[*koanf.Koanf, chi.Router]), new(env.API)))
	k      = wire.NewSet(config.New)
)

func allSvcs(sys2 *sys.Sys, fs2 *fs.Fs) []service.Service[chi.Router] {
	return []service.Service[chi.Router]{sys2, fs2}
}
